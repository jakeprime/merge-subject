name: Q-bot
run-name: Q-bot
on:
  issue_comment:
    types: [created, edited]

jobs:
  merge:
    name: Merge to main
    if: github.event.issue.pull_request && github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Acknowledge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'eyes'
            });

      - name: Set Git user
        run: |
          git config --global user.email "queue_bot@jakeprime.com"
          git config --global user.name "Q-bot"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Lock merge queue state
        run: .github/scripts/lock-merge-queue-state.sh

      - name: Load merge state
        id: load_state
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          git checkout merge-queue-state

          cat state.json

          branch_counter=$(jq '.branchCounter' state.json)
          branch_counter=$(($branch_counter + 1))

          pr_url="${{ github.event.issue.pull_request.url }}"
          pr_branch=$(gh api "$pr_url" --jq .head.ref)

          base_branch=$(jq -r '.mergeBranches | max_by(.count) | .name' state.json)
          if [[ "$base_branch" == "null" ]]; then
            base_branch=main
          fi

          echo "branch_counter=$branch_counter" >> "$GITHUB_OUTPUT"
          echo "merge_branch=merge-branch-$branch_counter" >> "$GITHUB_OUTPUT"
          echo "pr_branch=$pr_branch" >> "$GITHUB_OUTPUT"
          echo "base_branch=$base_branch" >> "$GITHUB_OUTPUT"

          cat "$GITHUB_OUTPUT"

          git checkout main

      - name: Create merge branch
        id: create_merge_branch
        run: |
          set -euo pipefail

          branch_counter=${{ steps.load_state.outputs.branch_counter }}
          base_branch=${{ steps.load_state.outputs.base_branch }}
          merge_branch=${{ steps.load_state.outputs.merge_branch }}
          pr_branch=${{ steps.load_state.outputs.pr_branch }}

          git fetch origin $base_branch $pr_branch

          git checkout $pr_branch
          git rebase --rebase-merges origin/$base_branch

          git checkout $base_branch
          git checkout -b $merge_branch
          git merge --no-ff $pr_branch
          git push --set-upstream origin HEAD:$merge_branch

          sha=$(git rev-parse --short HEAD)

          git log --oneline --decorate --graph

          git checkout merge-queue-state

          state="$(cat state.json)"

          state="$(echo $state | jq \
            --arg name "$merge_branch" \
            --arg sha "$sha" \
            --arg status "running" \
            --argjson count $branch_counter \
            '.mergeBranches += [{
              name: $name,
              sha: $sha,
              status: $status,
              count: $count
            }]')"

          state="$(echo $state | jq --argjson count $branch_counter '.branchCounter = $count')"

          if [[ -n "$state" ]]; then
            echo "$state" > state.json
            git add state.json
            git commit -m 'Updating merge state'
            git push
          fi

          git checkout main

      - name: Unlock merge queue state
        run: .github/scripts/unlock-merge-queue-state.sh

        # - name: Wait for successful CI

      - name: Lock merge queue state
        run: .github/scripts/lock-merge-queue-state.sh

      - name: Merge to main
        run: |
          set -euo pipefail

          base_branch=${{ steps.load_state.outputs.base_branch }}
          merge_branch=${{ steps.load_state.outputs.merge_branch }}
          pr_branch=${{ steps.load_state.outputs.pr_branch }}

          git checkout $pr_branch
          git rebase --rebase-merges $base_branch
          git push --force-with-lease
          git checkout main
          git pull
          git reset --hard $merge_branch
          git push --force-with-lease

          git push --delete origin $merge_branch
          # git push --delete origin $pr_branch

          git checkout merge-queue-state
          git pull
          cat state.json
          jq \
            --arg name "$merge_branch" \
            '.mergeBranches |= map(select(.name != $name))' state.json > tmp && mv tmp state.json
          git add state.json
          git commit -m '$merge_branch has been successfully merged'
          git push

          cat state.json

          git checkout main

      - name: Unlock merge queue state
        run: .github/scripts/unlock-merge-queue-state.sh
