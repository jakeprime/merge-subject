name: Merge queue
run-name: Merge queue
on:
  issue_comment:
    types: [created, edited]

jobs:
  check_mergeability:
    name: Check mergeability
    if: github.event.issue.pull_request && github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: read

    steps:
      - name: Acknowledge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'eyes'
            });

      - name: Check Mergeability
        uses: actions/github-script@v7
        with:
          script: |
            const pullRequest = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.data.head.ref
            });

            core.info(`checks: ${JSON.stringify(checks.data)}`);
            core.info(`pullRequest: ${JSON.stringify(pullRequest.data)}`);

            if (!pullRequest.data.rebaseable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Github does not think this branch is rebaseable, please rebase manually and try again.'
              });
              core.setFailed();
            } else if (checks.data.check_runs.find(run => !['success', 'skipped'].includes(run.conclusion)) ||
                       !pullRequest.data.mergeable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'PR is not mergeable, make sure all status checks are passing.'
              });
              core.setFailed();
            }

  enqueue_branch:
    name: Enqueue branch for merging
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Get PR source branch
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          pr_url="${{ github.event.issue.pull_request.url }}"
          branch=$(gh api "$pr_url" --jq .head.ref)
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Ensure merge state branch exists
        id: ensure_merge_state_branch
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: "merge-queue-state",
              });
            } catch (error) {
              if (error.jtatus === 404) {
                core.info("merge-queue-state branch does not exist");
                core.setFailed();
              }
            }

      - name: Checkout merge-queue-state branch
        uses: actions/checkout@v4
        with:
          ref: merge-queue-state

      - name: Get latest merge queue counter
        id: get_queue_counter
        run: |
          # get the latest current merge branch counter
          set -euo pipefail

          echo "1"

          git fetch origin merge-queue-state
          echo "2"
          git checkout merge-queue-state

          echo "3"

          branch_counter=$(jq '.branchCounter' state.json)
          echo "4"
          # nextBranchCounter=$((branchCounter + 1))
          echo "branch_counter=$branch_counter"
          echo "branch_counter=$branch_counter" >> "$GITHUB_OUTPUT"
          echo "merge_branch=merge-queue-$((branch_counter + 1))"
          echo "merge_branch=merge-queue-$((branch_counter + 1))" >> "$GITHUB_OUTPUT"
          echo "5"

      - name: Create merge branch
        id: create_merge_branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # branch off the latest merge queue branch and add to it
          set -euo pipefail

          git config --global user.email "queue_bot@jakeprime.com"
          git config --global user.name "Q-bot"


          branch_counter=${{steps.get_queue_counter.outputs.branch_counter}}

          if git show-ref --verify --quiet refs/heads/merge-queue-$branch_counter; then
            base_branch=merge-queue-$branch_counter
          else
            base_branch=main
          fi

          branch_counter=$((branch_counter + 1))

          git fetch origin ${{steps.get_pr_branch.outputs.branch}} && git checkout ${{steps.get_pr_branch.outputs.branch}}
          git fetch origin $base_branch && git rebase origin/$base_branch
          git checkout $base_branch
          git checkout -b merge-branch-$branch_counter
          git merge ${{steps.get_pr_branch.outputs.branch}} --no-ff
          git push origin HEAD:merge-branch-$branch_counter
          # TODO: handle failure to rebase

          echo "something something"
          echo "$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs[].name')"
          echo "sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "branch_counter=$branch_counter" >> "$GITHUB_OUTPUT"

      - name: Write new branch counter
        id: write_branch_counter
        run: |
          set -euo pipefail

          branch_counter=${{steps.create_merge_branch.outputs.branch_counter}}
          echo "$branch_counter"

          git fetch origin merge-queue-state
          git checkout merge-queue-state
          jq ".branchCounter = $branch_counter" state.json > tmp && mv tmp state.json

          git config --global user.email "queue_bot@jakeprime.com"
          git config --global user.name "Q-bot"

          git add state.json
          git commit -m "Incrementing merge queue counter"
          git push origin HEAD:merge-queue-state

      # - name: Wait for CircleCI to pass
      #   id: wait_for_ci
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     REPO=${{ github.repository }}
      #     SHA=${{ steps.create_merge_branch.outputs.sha }}

      #     for i in {1..60}; do
      #       result=$(gh api repos/$REPO/commits/$SHA/status)

      #       state=$(echo "$result" | jq -r '.state')

      #       echo "Status state: $state"

      #       if [ "$state" = "success" ]; then
      #         echo "✅ All statuses passed"
      #         exit 0
      #       elif [ "$state" = "failure" ]; then
      #         echo "❌ One or more statuses failed"
      #         exit 1
      #       fi

      #       echo "Waiting for statuses..."
      #       sleep 10
      #     done

      #     echo "⏰ Timed out waiting for commit status"
      #     exit 1

      - name: Checkout merge-queue-x branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # ref: ${{ steps.get_queue_counter.outputs.merge_branch }}

      - name: Merge into main
        id: merge_to_main
        run: |
          echo "git fetch origin ${{ steps.get_queue_counter.outputs.merge_branch }}"
          git fetch origin ${{ steps.get_queue_counter.outputs.merge_branch }}

          echo "git fetch origin ${{steps.get_pr_branch.outputs.branch}} && git checkout ${{steps.get_pr_branch.outputs.branch}}"
          git fetch origin ${{steps.get_pr_branch.outputs.branch}} && git checkout ${{steps.get_pr_branch.outputs.branch}}

          echo "git reset --hard origin/${{steps.get_pr_branch.outputs.branch}}"
          git reset --hard origin/${{steps.get_pr_branch.outputs.branch}}

          echo "git push --force-with-lease"
          git push --force-with-lease

          echo "git fetch origin main && git checkout main"
          git fetch origin main && git checkout main

          echo "git merge ${{steps.get_pr_branch.outputs.branch}}"
          git merge ${{steps.get_pr_branch.outputs.branch}}

          echo "git push"
          git push
