name: Merge queue
run-name: Merge queue
on:
  issue_comment:
    types: [created, edited]

jobs:
  check_mergeability:
    name: Check mergeability
    if: github.event.issue.pull_request && github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: read

    steps:
      - name: Acknowledge
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'eyes'
            });

      - name: Check Mergeability
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequest = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.data.head.ref
            });

            core.info(`checks: ${JSON.stringify(checks.data)}`);
            core.info(`pullRequest: ${JSON.stringify(pullRequest.data)}`);

            if (!pullRequest.data.rebaseable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Github does not think this branch is rebaseable, please rebase manually and try again.'
              });
              core.setFailed();
            } else if (checks.data.check_runs.find(run => !['success', 'skipped'].includes(run.conclusion)) ||
                       !pullRequest.data.mergeable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'PR is not mergeable, make sure all status checks are passing.'
              });
              core.setFailed();
            }

  enqueue_branch:
    name: Enqueue branch for merging
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Branch from latest
        id: branch_from_latest
        uses: actions/github-script@v6
        with:
          script: |
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const branchPrefix = "merge-queue-branch-";
            const latestMergeNumber = branches
              .slice(0, 50)
              .map(x => x.name)
              .filter(x => x.indexOf(branchPrefix) === 0)
              .map(x => parseInt(branchPrefix.length))
              .sort()
              .reverse()
              [0];
            const branchName = `branchPrefix${latestMergeNumber || 1}`;
            core.setOutput("branchName", branchName);

      - name: Confirm
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Creating branch: ${{ steps.branch_from_latest.outputs.branchName }}`
            });
