name: Merge queue
run-name: Merge queue
on:
  issue_comment:
    types: [created, edited]

jobs:
  check_mergeability:
    name: Check mergeability
    if: github.event.issue.pull_request && github.event.comment.body == '/merge'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      checks: read

    steps:
      - name: Acknowledge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'eyes'
            });

      - name: Check Mergeability
        uses: actions/github-script@v7
        with:
          script: |
            const pullRequest = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.data.head.ref
            });

            core.info(`checks: ${JSON.stringify(checks.data)}`);
            core.info(`pullRequest: ${JSON.stringify(pullRequest.data)}`);

            if (!pullRequest.data.rebaseable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Github does not think this branch is rebaseable, please rebase manually and try again.'
              });
              core.setFailed();
            } else if (checks.data.check_runs.find(run => !['success', 'skipped'].includes(run.conclusion)) ||
                       !pullRequest.data.mergeable) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'PR is not mergeable, make sure all status checks are passing.'
              });
              core.setFailed();
            }

  enqueue_branch:
    name: Enqueue branch for merging
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Ensure merge state branch exists
        id: ensure_merge_state_branch
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: "merge-queue-state",
              });
            } catch (error) {
              if (error.jtatus === 404) {
                core.info("merge-queue-state branch does not exist");
                core.setFailed();
              }
            }

      - name: Checkout merge-queue-state branch
        uses: actions/checkout@v4
        with:
          ref: merge-queue-state

      - name: Get latest merge queue counter
        id: get_queue_counter
        run: |
          # get the latest current merge branch counter
          set -euo pipefail

          # git fetch origin merge-queue-state
          git checkout origin/merge-queue-state -b merge-queue-state-working

          currentBranchCounter=$(jq '.branchCounter' state.json)
          next=$((currentBranchCounter + 1))

          echo "yes"
          echo "branchCounter=$(next)"
          echo "no"
          echo "branchCounter=$(next)" >> "$GITHUB_OUTPUT"

      # - name: Write new branch counter
      #   id: write_branch_counter
      #   run: |
      #     set -euo pipefail

      #     jq ".currentBranchCounter = ${{steps.get_queue_counter.outputs.branchCounter}}" state.json > state.json

      #     git add state.json
      #     git commit -m "Incrementing merge queue counter"
      #     git push origin HEAD:merge-queue-state
